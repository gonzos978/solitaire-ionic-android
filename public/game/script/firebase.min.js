import{initializeApp}from"https://www.gstatic.com/firebasejs/11.0.0/firebase-app.js";import{getFirestore,doc,setDoc,getDoc,Timestamp}from"https://www.gstatic.com/firebasejs/11.0.0/firebase-firestore.js";import{getAnalytics,logEvent}from"https://www.gstatic.com/firebasejs/11.0.0/firebase-analytics.js";const LEVELS=[{name:"Bronze",minPlays:0,maxPlays:50,reward:100},{name:"Silver",minPlays:50,maxPlays:200,reward:200},{name:"Gold",minPlays:200,maxPlays:500,reward:400},{name:"Diamond",minPlays:500,maxPlays:1/0,reward:800}];export const adnan="adnan";function getPlayerLevel(e){for(let a=0;a<LEVELS.length;a++)if(e>=LEVELS[a].minPlays&&e<LEVELS[a].maxPlays)return LEVELS[a];return LEVELS[0]}function isSameUTCDate(e,a){return e.getUTCDate()===a.getUTCDate()&&e.getUTCMonth()===a.getUTCMonth()&&e.getUTCFullYear()===a.getUTCFullYear()}const firebaseConfig={apiKey:"AIzaSyBV3rANre-Qz3JkwDfcJ5l81f-foi9wEFU",authDomain:"solitaire-game-536b5.firebaseapp.com",projectId:"solitaire-game-536b5",storageBucket:"solitaire-game-536b5.appspot.com",messagingSenderId:"843030836295",appId:"1:843030836295:web:eb8bf2c67658401733ad62"},app=initializeApp(firebaseConfig),db=getFirestore(app),analytics=getAnalytics(app);export async function getPlayerData(){logEvent(analytics,"game_start",{level:1});const e=getPlayerId(),a=doc(db,"players",e),t=await getDoc(a),n=Intl.DateTimeFormat().resolvedOptions().timeZone||"Unknown";if(t.exists()){const e=t.data();return e.country=n,e}{const e=new Date,t={coins:300,level:"Bronze",cards:3,hints:3,playCount:0,lastRewardTimestamp:Timestamp.fromDate(e),country:n};return await setDoc(a,t),t}}export async function saveData(e,a,t){try{await setDoc(doc(db,e,a),t,{merge:!0}),console.log("Data saved successfully!")}catch(e){console.error("Error saving data:",e)}}export async function getData(e,a){try{const t=doc(db,e,a),n=await getDoc(t);return n.exists()?n.data():null}catch(e){return console.error("Error reading data:",e),null}}export function getPlayerId(){let e=localStorage.getItem("playerId");return e||(e="player_"+Math.random().toString(36).substring(2,10),localStorage.setItem("playerId",e)),e}export async function claimDailyReward(){const e=getPlayerId(),a="players";let t=await getData(a,e);if(!t){console.log("First-time player: initializing default data");const t=new Date,n=Intl.DateTimeFormat().resolvedOptions().timeZone||"Unknown";return await saveData(a,e,{coins:300,playCount:0,level:"Bronze",dailyStreak:0,lastRewardTimestamp:Timestamp.fromDate(t),country:n}),{claimed:!1,streak:0,reward:0,level:"Bronze"}}const n=new Date;let s=1;const r=t.lastRewardTimestamp?.toDate?t.lastRewardTimestamp?.toDate():new Date(t.lastRewardTimestamp);if(isSameUTCDate(r,n))return{claimed:!1,streak:t.dailyStreak,reward:0,level:t.level};const o=new Date;o.setDate(o.getDate()-1),isSameUTCDate(r,o)&&(s=(t.dailyStreak||0)+1);const i=(t.playCount||0)+1,l=getPlayerLevel(i),c=l.reward,d=Intl.DateTimeFormat().resolvedOptions().timeZone||"Unknown";return await saveData(a,e,{coins:(t.coins||0)+c,playCount:i,level:l.name,dailyStreak:s,lastRewardTimestamp:Timestamp.fromDate(n),country:d}),{claimed:!0,streak:s,reward:c,level:l.name,playCount:i}}export async function isDailyRewardClaimed(){const e=getPlayerId(),a=await getData("players",e);if(!a||!a.lastRewardTimestamp)return!1;return isSameUTCDate(a.lastRewardTimestamp.toDate?a.lastRewardTimestamp.toDate():new Date(a.lastRewardTimestamp),new Date)}export async function resetPlayerDefaults(){const e=getPlayerId(),a={dailyStreak:0,lastRewardTimestamp:null,rewards:[],coins:300,playCount:0,level:"Bronze"};try{await saveData("players",e,a),console.log("Player reset to default values!")}catch(e){console.error("Error resetting player:",e)}}export async function getPlayerLevelFromFirebase(){const e=getPlayerId(),a=await getData("players",e);if(!a)return"Bronze";return getPlayerLevel(a.playCount||0).name}export async function spendCoins(e){const a=getPlayerId(),t="players",n=await getData(t,a);if(!n)return console.warn("Player not found! Cannot spend coins."),{success:!1,coins:0,cards:0};const s=n.coins??0,r=n.cards??0;if(s<e)return console.warn("Not enough coins to spend!"),{success:!1,coins:s,cards:r};const o=s-e,i=r+1;return await saveData(t,a,{coins:o,cards:i}),console.log("Player spent $ {amount} coins. New balance: $ {newCoins}, cards: $ {newCards}"),{success:!0,coins:o,cards:i}}export async function spendCardAsync(){const e=getPlayerId(),a="players",t=await getData(a,e);if(!t)return console.warn("Player not found! Cannot spend card."),{success:!1,cards:0};const n=t.cards??0;if(n<=0)return console.warn("No cards available to spend!"),{success:!1,cards:0};const s=n-1;return await saveData(a,e,{cards:s}),console.log("Player spent 1 card. Remaining cards: $ {newCards}"),{success:!0,cards:s}}export async function addCoins(e){const a=getPlayerId(),t="players",n=await getData(t,a);if(!n)return console.warn("Player not found! Cannot add coins."),{success:!1,coins:0};const s=(n.coins||0)+e;return await saveData(t,a,{coins:e}),console.log("Added $ {amount} coins. New balance: $ {newCoins}"),{success:!0,coins:s}}export async function incrementPlayCount(){const e=getPlayerId(),a="players",t=await getData(a,e);if(!t)return console.warn("Player not found! Cannot update play count."),await saveData(a,e,{playCount:1,coins:300,cards:0,level:"Bronze"}),{success:!0,playCount:1};const n=(t.playCount||0)+1;return await saveData(a,e,{playCount:n}),console.log("Player finished a game. New play count: $ {newPlayCount}"),{success:!0,playCount:n}}export async function spendHint(){const e=getPlayerId(),a="players",t=await getData(a,e);if(!t)return console.warn("Player not found! Cannot spend hint."),{success:!1,hints:0};const n=t.hints??0;if(n<=0)return console.warn("No hints available to spend!"),{success:!1,hints:0};const s=n-1;return await saveData(a,e,{hints:s}),console.log("Player used 1 hint. Remaining hints: $ {newHints}"),{success:!0,hints:s}}export async function buyHints(e=1){const a=getPlayerId(),t="players",n=await getData(t,a);if(!n)return console.warn("Player not found! Cannot add hints."),await saveData(t,a,{hints:e,coins:300,cards:0,level:"Bronze"}),{success:!0,hints:e};const s=(n.hints??0)+1,r=n.coins-e;return await saveData(t,a,{hints:s}),console.log("Player bought $ {amount} hint(s). Total hints: $ {newHints}"),{success:!0,hints:s,coins:r}}